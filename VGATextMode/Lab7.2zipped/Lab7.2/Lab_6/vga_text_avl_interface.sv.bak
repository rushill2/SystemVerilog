/************************************************************************
Avalon-MM Interface VGA Text mode display

Register Map:
0x000-0x0257 : VRAM, 80x30 (2400 byte, 600 word) raster order (first column then row)
0x258        : control register

VRAM Format:
X->
[ 31  30-24][ 23  22-16][ 15  14-8 ][ 7    6-0 ]
[IV3][CODE3][IV2][CODE2][IV1][CODE1][IV0][CODE0]

IVn = Draw inverse glyph
CODEn = Glyph code from IBM codepage 437

Control Register Format:
[[31-25][24-21][20-17][16-13][ 12-9][ 8-5 ][ 4-1 ][   0    ] 
[[RSVD ][FGD_R][FGD_G][FGD_B][BKG_R][BKG_G][BKG_B][RESERVED]

VSYNC signal = bit which flips on every Vsync (time for new frame), used to synchronize software
BKG_R/G/B = Background color, flipped with foreground when IVn bit is set
FGD_R/G/B = Foreground color, flipped with background when Inv bit is set

************************************************************************/
`define NUM_REGS 601 //80*30 characters / 4 characters per register
`define CTRL_REG 600 //index of control register

module vga_text_avl_interface (
	// Avalon Clock Input, note this clock is also used for VGA, so this must be 50Mhz
	// We can put a clock divider here in the future to make this IP more generalizable
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,					// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,			// Avalon-MM Byte Enable
	input  logic [9:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,		// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,		// Avalon-MM Read Data
	
	// Exported Conduit (mapped to VGA port - make sure you export in Platform Designer)
	output logic [3:0]  red, green, blue,	// VGA color channels (mapped to output pins in top-level)
	output logic hs, vs						// VGA HS/VS
);

logic [31:0] LOCAL_REG       [`NUM_REGS]; // Registers
logic [31:0] data;
logic hs_holder, vs_holder;
logic [9:0] draw_x, draw_y;
logic[9:0] reg_addr;
logic [9:0] drawY_shift;
 // add logic for control reg
 always_ff @ (posedge CLK) begin
        if(RESET)
            for (int i = 0; i < 601; i++)
                LOCAL_REG[i] = '0;
        
        else if (AVL_READ & AVL_CS)
            AVL_READDATA = LOCAL_REG[AVL_ ADDR];

        else if (AVL_WRITE & CS) begin
				data = LOCAL_REG[AVL_ADDR];
				unique case (AVL_BYTE_EN) 
					4'b1111: LOCAL_REG[reg_addr] = AVL_WRITEDATA;			// all 32 bits
					4'b1100: LOCAL_REG[reg_addr] = {AVL_WRITEDATA[31:16], data[15:0]}; // upper 2 
					4'b0011: LOCAL_REG[reg_addr] = {data[31:16], AVL_WRITEDATA[15:0]}; // lower 2 
					4'b1000: LOCAL_REG[reg_addr] = {AVL_WRITEDATA[31:24], data[23:0]}; // byte 3
					4'b0100: LOCAL_REG[reg_addr] = {data[31:24], AVL_WRITEDATA[23:16], data[15:0]};   // byte 2
					4'b0010: LOCAL_REG[reg_addr] ={data[31:16], AVL_WRITEDATA[15:8], data[7:0]};      // byte 1
					4'b0001:  LOCAL_REG[reg_addr] ={data[31:8], AVL_WRITEDATA[7:0]};				  // byte 0
				endcase
		end
    end

//Declare submodules..e.g. VGA controller, ROMS, etc
font_rom rom(.addr(), 
			.output(fontdata));

vga_controller vga(.Clk(CLK), .Reset(RESET), .hs(hs_holder), .vs(vs_holder), pixel_clk(), .sync(), .DrawX(draw_x), .DrawY(draw_y));
//handle drawing (may either be combinational or sequential - or both).

// Logic for calculating write address
always_comb begin
	reg_addr = DrawY*80;
	reg_addr = reg_addr >> 2;
	drawY_shift = reg_addr >> 2;
	reg_addr = reg_addr + drawY_shift;
end



endmodule
